# tl;dr
TNL is requesting support from SRE team with AWS API Gateway configuration steps that require privileges we lack.
See [stage runbook](#stage-runbook) section below for concrete steps needed to update the API Gateway on stage.
See [prod runbook](#prod-runbook) section below for similar steps to follow up on prod.

As the repo used to control the API Gateway, the `api-manager` repo, has fallen out of use, we've included a
[Background](#background) section in this document to provide context for the requested operations.

# <a name="background"></a> Background

## Discovery
 
- The TNL team is adding the Studio content public API and intends for that to be offered via our shared AWS API gateway.
- TNL has conducted a [discovery activity](https://2u-internal.atlassian.net/browse/TNL-10899) surrounding use of this repo using the playground AWS account
  - The repo hasn't received active attention for some time. 
  - Generic API Gateway learnings from that activity are documented in "configuration_objects.md" in this folder
  - edX-specific learnings from that activity follow here and are incorporated into this document's [runbook](#runbook) section

## Last "go live" date from repo updates was September 20, 2021
- Review of __api_manager__ repo [commits](https://github.com/edx/api-manager/commits/master)  shows a steady stream of python requirement upgrades, marked as "Verified" commits
  - The non-verified commits are by the `edx-requirements-bot`
  - The verified commits are merge commits, frequently run by Usama Sadiq and M Umar Khan, both of Arbisoft
- Review of the [deployment history for the prod_red stage for the prod environment custom domain name on the API Gateway (prod_black)](https://us-east-1.console.aws.amazon.com/apigateway/home?region=us-east-1#/apis/v96bizdp9b/stages/prod_red) reveals that it is this stage that the python upgrade merges are being applied to as new deployments
- But the [live stage for the prod environment custom domain name](https://us-east-1.console.aws.amazon.com/apigateway/main/publish/domain-names/api-mappings?domain=api.edx.org&region=us-east-1) is not `prod_red`, but `prod_black`
  - And `prod_black` has not been updated with new commits since September 20, 2021: no changes to the repo have gone live since that date
- Similar review of "go live dates" for other stages for the prod environment custom domain are even older
  - June 27, 2016 for "black"
  - June 27, 2016 for "red"
- For the stage environment
  - The "Yellow" stage is live and is current with the latest repo commits and deployments
  - Other named stages are behind Yellow, but not by much; unclear who is using these, or how

## The API Gateway supports an "omnibus" API
- The "API" offered by the API Gateway is an amalgamation of edX APIs (discovery, enterprise, registrar)
  - Specification of the omnibus API is in [swagger/api.yaml](https://github.com/edx/api-manager/blob/master/swagger/api.yaml)
- The last [substantive PR](https://github.com/edx/api-manager/pull/127) was on September 20, 2021, adding [v3 enterprise customer endpoints](https://github.com/edx/api-manager/pull/127/files)
  - That PR and merge line up with the last "go live" date for the prod environment API Gateway (`prod_black` stage)

# <a name="runbook"></a> SRE Runbook

1. Review this document

## <a name="stage-runbook"></a> Deploy and test on stage

2. Download this repo onto the EC2 instance hosting the prod API Gateway
3. Checkout version prior to this PR's merge
4. Verify that APIs on API Gateway are up and running on stage, as expected
5. Checkout version with this PR's merge
6. Import the Studio content API swagger specification to a new stage, chartreuse

> ./scripts/aws/invocation_history/import_studio_to_stage_chartreuse.sh

7. Verify that the public APIs on the stage environment API Gateway have suffered no regressions
8. Verify that the studio API is now working as expected on stage

If the above fails,

9. Roll back to the former AWS stage that was live on the stage environment

> ./scripts/aws/invocation_history/roll_back_to_yellow.sh


## <a name="prod-runbook"></a> Deploy and test on prod


4. On AWS CloudShell on that instance, from this repo's root folder:
   1. Bring the live public API stage, prod_black, up to date with Python upgrades since Septmeber of 2021

> ./scripts/aws/invocation_history/deploy_to_prod_black.sh

    2. Verify that public APIs on the API Gateway have suffered no regressions
5. Checkout version with merge from this PR on `api-manager` repo
6. Continue with CloudShell actions:
   1. Import the Studio content API swagger specification to a new stage, Cerulean

> ./scripts/aws/invocation_history/deploy_studio_api_to_prod_black.sh

    2. Make the new stage go live

> ./scripts/aws/invocation_history/cerulean_live.sh

    3. Verify that public APIs on the API Gateway have suffered no regressions
    4. Test the Studio content APIs


